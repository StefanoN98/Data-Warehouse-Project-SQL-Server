/*
===============================================================================
Magnitude AnalysisMAGNITUDE ANALYSIS===============================================================================
Purpose:
    - To quantify data and group results by specific dimensions.
    - For understanding data distribution across categories.

SQL Functions Used:
    - Aggregate Functions: SUM(), COUNT(), AVG()
    - GROUP BY, ORDER BY
===============================================================================
*/


-- Find total customers by countries
	SELECT country,
		   COUNT(customer_id) AS total_customers
	FROM GOLD.dim_customer
	GROUP BY country
	ORDER BY total_customers DESC
	

-- Find total customers by gender
	SELECT gender,
		   COUNT(customer_key) AS total_customers
	FROM GOLD.dim_customer
	GROUP BY gender
	ORDER BY total_customers DESC

-- Find total products by category
	SELECT category,
		   COUNT(product_key) AS total_products
	FROM GOLD.dim_product
	GROUP BY category
	ORDER BY total_products DESC

-- What is the average costs in each category?
	SELECT category,
		   AVG(cost) AS total_products
	FROM GOLD.dim_product
	GROUP BY category
	ORDER BY total_products DESC

-- What is the total revenue generated for each category?
	SELECT
    dm.category,
		SUM(fs.sales_amount) AS total_revenue
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_product dm
    ON fs.product_key = dm.product_key
	GROUP BY dm.category
	ORDER BY total_revenue DESC;

-- Find total revenue is generated by each customer
	SELECT dm.customer_key,
		   dm.first_name,
		   dm.last_name,
		  SUM(sales_amount) AS total_sales
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_customer dm
	ON fs.customer_key=dm.customer_id
	GROUP by dm.customer_key,
			 dm.first_name,
		     dm.last_name
	ORDER BY SUM(sales_amount) DESC;




-- What is the distribution of sold items across countries?
	SELECT dm.country,
		  SUM(fs.quantity) AS total_sold_item
	FROM gold.fact_sales fs
	LEFT JOIN gold.dim_customer dm
	ON fs.customer_key=dm.customer_id
	--WHERE dm.customer_key IS NOT NULL
	GROUP by dm.country
	ORDER BY total_sold_item DESC;

